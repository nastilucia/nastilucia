using GlobalSensitivity, Statistics, OrdinaryDiffEq, QuasiMonteCarlo, Plots
include("functions.jl")
#tables
tables = Dict{Symbol,Tuple{Vararg{Float64}}}(
    :ROCWSO => (
        0.06,
        0.02,
        0,
        -0.007,
        -0.01,
    ),
    :IEST => (
        1,
        1,
        0,
    ),
    :PSESTR => (
        0,
        1,
    ),
)
ranges = Dict{Symbol,Tuple{Float64,Float64}}(
    :IEST => (0, 2),
    :PSESTR => (0, 1),
    :ROCWSO => (0, 2),
)

function e4a(du, u, p, t)
    u[106] = p[2] * exp(-(p[1]) *  (t  -  1980))  *  IfElse.ifelse(t  >  2022, exp(-(p[3])  *  (t  -  2022)),  1) 
    u[107] = u[108] * u[106] /  1000 
    u[109] =  withlookup(t,  [(1980.0,  0.009),  (2020.0,  0.009),  (2099.27,  0.0)]) 
    u[110] = u[109] + u[107]
    u[111] = p[5] / p[4]
    du[1] = u[110] - u[112]
    u[112] = u[1] / p[6]
    u[113] = u[1] / p[7]
    u[114] =  withlookup(t,  [(1980.0,  0.43),  (2000.0,  0.64),  (2010.0,  0.73),  (2020.0,  0.8),  (2100.0,  1.0)]) 
    u[115] = u[113] * u[114]
    u[116] = p[8] * exp(-(p[10]) *  (t  -  1980))  *  IfElse.ifelse(t  >  2022, exp(-(p[9])  *  (t  -  2022)),  1) 
    u[117] = u[118] * u[116] /  1000 
    u[119] =  withlookup(t,  [(1980.0,  0.19),  (2020.0,  0.19),  (2100.0,  0.19)]) 
    u[120] = u[119] + u[117]
    u[121] = p[11] / p[4]
    du[2] = u[120] - u[122]
    u[122] = u[2] / p[12]
    u[123] = u[2] / p[13]
    u[124] =  withlookup(t,  [(1980.0,  0.82),  (2000.0,  0.94),  (2020.0,  1.01),  (2100.0,  1.1)]) 
    u[125] = u[123] * u[124]
    u[126] =  IfElse.ifelse(t  >  2022,  1  + p[15] * (u[127] / p[14] -  1),  1) 
    u[128] = p[16] * u[126]
    u[129] = u[122] * p[17]
    u[130] = (u[3] - p[18])  / u[128]
    u[131] = u[134] + u[132] - u[133]
    u[135] = (u[131] / u[136])  *  1000 
    u[137] = u[133] * p[19]
    u[133] =  IfElse.ifelse(t  >  2022,  ramp(t, (p[20])  / u[138],  2022,  2022  + u[138]),  0) 
    du[3] = u[131] - u[130] +  2  * u[129]
    u[139] = u[3] / p[21]
    u[140] =  withlookup(t,  [(1980.0,  0.0032),  (1990.0,  0.0041),  (2000.0,  0.0046),  (2020.0,  0.0051),  (2100.0,  0.006)]) 
    u[141] = u[139] * u[140]
    u[142] =  withlookup(t,  [(1980.0,  0.18),  (2000.0,  0.36),  (2020.0,  0.39),  (2050.0,  0.37),  (2100.0,  0.0)]) 
    u[143] = u[141] + u[142] + u[125] + u[115]
    u[144] = u[131] * p[24] + u[120] * p[23] + u[110] * p[22]
    u[145] = (p[28] * p[25] + (p[27] - p[28])  * p[26])  / p[27]
    u[146] = (u[4] * p[25] + (p[27] - u[4])  * p[26])  / p[27]
    u[147] = (p[29] *  ( (u[127] +  297)  /  297) )  * (u[146] / u[145]) 
    u[148] = u[5] * u[147]
    u[149] = p[30] * (u[127] / p[31]) 
    u[150] = u[149] / p[32]
    u[151] = u[150] * p[34] * p[35] * p[33]
    u[152] = u[4] * u[149]
    du[4] =  - u[152]
    u[153] = u[4] *  100 
    u[154] = p[36] *  (1  + p[37] * (u[127] / p[31] -  1)  ) 
    u[155] = p[38] *  (1  + p[39] * (u[154] / p[36] -  1)  ) 
    u[156] = u[143] + u[155]
    u[157] = (u[156] * p[27])  *  31.5  /  1000 
    u[127] = p[31] + (u[5] - p[41])  * p[40]
    u[158] =  withlookup( u[127],  [(0.0,  1.0),  (1.2,  4.8),  (2.0,  8.6),  (2.9,  14.0),  (5.2,  40.0)]) 
    u[159] = p[42] *  ( (u[127] +  287)  /  287  ) 
    u[160] = u[5] * u[159]
    du[5] = u[157] - u[151] - u[160] - u[148]
    du[6] = (u[127]-u[6]) / p[43]
    u[161] = u[162] + u[163]
    u[164] = u[161] / u[165]
    u[166] =  min(1, p[44])  +  ramp(t, (p[46] - p[44])  /  42,  1980,  2022)  +  ramp(t, (p[45] - p[46])  /  78,  2022,  2100) 
    u[167] =  pulse(t,  2022,  1)  * u[9] * p[47]
    u[168] = u[172] - u[170] + u[171] - u[169]
    u[163] = u[174] + u[175] - u[173]
    u[162] = u[176] + u[178] - u[177]
    u[179] = u[168] / u[180]
    u[181] = u[168] / u[165]
    u[182] = u[181] + u[183] + u[184]
    u[185] =  IfElse.ifelse(t  >  2022, p[49] + p[48] + p[50],  0)  * u[165]
    du[7] = (u[186]-u[7]) / p[51]
    u[187] =  IfElse.ifelse(t  >  2022, u[188] * p[52],  0) 
    du[8] = (u[189]-u[8]) / p[51]
    u[190] = u[191] - u[163]
    du[9] = u[173] - u[167] - u[175]
    u[192] = u[9] / u[165]
    u[186] = u[185] + u[187]
    u[189] = p[54] +  IfElse.ifelse(t  >  2022, p[53],  0) 
    u[193] = (u[174] + u[175])  / u[165]
    u[194] = u[197] + u[195] + u[169] + u[170] + u[196]
    u[198] = u[194] / u[165]
    u[174] = u[9] * u[199]
    u[200] = u[10] - u[201]
    u[173] =  max(0, (u[202] - u[9])  / p[55])  +  step(t, p[56],  2022)  * u[165]
    u[191] = (u[197] + u[195] + u[169] + u[170] + u[196])  - u[203] + u[204]
    u[205] = u[191] / u[165]
    u[175] = u[9] / p[57]
    u[201] = u[10] * p[58]
    u[206] = u[201] + u[200]
    u[183] = u[206] / u[165]
    u[196] = u[165] *  IfElse.ifelse(t  >  2022,  ramp(t, p[59] / u[138],  2022,  2020  + u[138]),  0) 
    u[207] = u[208] / u[209]
    u[210] = u[207] / p[60]
    u[211] = u[166] * u[165] *  (1  - u[44]) 
    u[212] = p[61] * u[165] * u[44]
    u[202] = u[165] * p[62]
    u[213] = u[214] * p[63]
    u[171] = u[11] * u[215]
    u[215] =  1  - u[216]
    u[217] = u[208]
    u[218] = u[165] *  (1  - u[44]) 
    u[208] = u[218] - u[195]
    u[219] = u[11] - u[171]
    u[216] = p[64] *  (1  + p[65] * (u[69] / p[66] -  1)) 
    u[195] = u[211] + u[7] * p[67]
    u[220] = u[195] / u[218]
    du[10] = (u[190]-u[10]) / p[68]
    du[11] = (u[217]-u[11]) / p[69]
    du[12] = (u[221]-u[12]) / p[70]
    u[184] = u[222] / u[165]
    u[204] = u[170] + u[169]
    u[169] = u[171] * p[71]
    u[170] = u[172] * p[71]
    u[203] = (u[197] + u[195] + u[169] + u[170] + u[196])  * u[8]
    u[223] = u[221] + u[190] + u[217] - u[204]
    u[222] = u[219] + u[224]
    u[172] = u[12] * p[72]
    u[221] = u[209] - u[162]
    du[13] = u[177] - u[178]
    u[225] = u[12] / u[43]
    u[226] = u[162] / u[209]
    u[214] = u[165] * u[44]
    u[209] = u[214] - u[197] + u[203]
    u[176] = u[13] * u[227]
    u[197] = u[212] + u[7] *  (1  - p[67]) 
    u[228] = u[197] / u[214]
    u[177] =  max(0, (u[213] - u[13])  / p[73]) 
    u[178] = u[13] / p[74]
    u[229] = u[13] / u[209]
    u[224] = u[12] - u[172]
    u[230] = u[231] * p[75]
    u[232] = p[76] *  (1  - exp(-( u[233] /  10)  )  ) 
    u[234] = (u[232] /  1000)  * u[180] *  (1  - u[235]) 
    u[235] = p[78] +  ramp(t, (p[77] - p[78])  / u[138],  2022,  2022  + u[138]) 
    u[134] = u[236] + u[234]
    u[236] = u[237] * (u[238] /  1000)  *  (1  - u[235]) 
    u[239] = (u[134] / u[180])  *  1000 
    u[240] = p[19] * u[241]
    u[241] = u[235] * (u[234] + u[236])  /  (1  - u[235]) 
    u[238] =  2.8  * exp(p[79]  *  (t  -  1980)) 
    du[14] = u[242]
    u[242] = p[80] *  0  +  step(t, p[80],  2022) 
    u[243] =  withlookup( u[233],  [(0.0,  0.0),  (10.0,  4.0),  (20.0,  7.0),  (30.0,  9.0),  (50.0,  12.0),  (65.0,  13.0)]) 
    u[244] =  withlookup( u[233],  [(0.0,  0.3),  (15.0,  2.0),  (25.0,  3.1),  (35.0,  4.0),  (50.0,  5.0)]) 
    u[245] = (u[180] * u[243] * exp(-p[81]  *  (t  -  1980)))  / u[14]
    u[246] = (u[180] * u[244] * exp(-p[81] *  (t  -  1980)))  / u[14]
    u[247] = p[84] +  ramp(t, (p[83] - p[84])  /  42,  1980,  2022)  +  ramp(t, (p[82] - p[83])  / u[138],  2022,  2022  + u[138]) 
    u[248] = u[247] * u[246]
    u[249] = (p[85] /  1000)  * u[248]
    u[250] = u[248] * p[86]
    u[251] = u[246] - u[248]
    u[237] = u[251] + u[252]
    u[253] = u[245] + u[250]
    u[254] = p[87] +  ramp(t, (p[89] - p[87])  /  42,  1980,  2022)  +  ramp(t, (p[88] - p[89])  / u[138],  2022,  2022  + u[138]) 
    u[255] = u[253] * u[254]
    u[256] = u[255] / p[90]
    u[257] = u[256] - u[15]
    du[15] = u[258] - u[259]
    u[258] =  max(0, (u[257] / p[91])  + (u[259]) )
    u[259] = u[15] / p[92]
    u[260] = u[258]
    du[16] = u[260]
    u[261] =  log(2)  +  log( u[16] / p[93]) 
    u[262] =  (1  - p[94])^u[261]
    u[263] = p[95] * u[262]
    u[264] = u[263] * u[258]
    u[265] = p[96] * u[266]
    u[267] = u[264] + u[265]
    u[268] = p[97] * u[269]
    u[270] = p[98] * u[271]
    u[272] = u[268] + u[270]
    u[273] = u[272] + u[267] + u[230]
    u[266] = u[15] * p[90]
    u[274] = u[266] * p[99] / p[100]
    u[275] = u[274] * p[101]
    u[276] = p[102] + u[275]
    u[277] = p[104] * p[103]
    u[278] = u[266] / u[277] + u[276] / p[105]
    u[279] = u[277] / p[105]
    u[280] = u[237] / p[105]
    u[281] = u[266] + u[231]
    u[282] =  max(0, u[253] - u[281]) 
    u[283] = u[282] / p[106]
    u[284] = (u[283] - u[17])  / p[107] + u[285]
    u[269] =  max(0, u[284]) 
    du[17] = u[269] - u[285]
    u[286] = p[108] * u[287]
    u[285] = u[17] / u[286]
    u[288] = u[282] / u[17]
    u[287] =  1  + p[109] * ((u[288] / p[106])  -  1) 
    u[271] = u[17] * u[288]
    u[289] =  withlookup(t,  [(1980.0,  75.0),  (2000.0,  310.0),  (2020.0,  310.0),  (2098.9,  310.0)]) 
    u[231] = u[289] * p[110]
    u[290] = u[271] + u[231] + u[266]
    u[291] = u[290] / u[253]
    u[292] = (u[271] + u[231])  / u[290]
    u[293] = u[251] + u[290] / u[279] + u[276]
    u[294] = u[293] / u[180]
    u[252] = u[271] / u[279]
    u[295] = (u[245] * p[111] /  1000)  * p[112]
    u[296] = (u[246] * p[113] /  1000)  * p[112]
    u[297] = (u[251] * p[113])  /  1000 
    u[298] = u[290] * p[114]
    u[299] = u[245] * p[114]
    u[300] = u[295] + u[296] + u[299]
    u[301] = u[300] / u[136]
    u[302] = u[297] + u[273] + u[298] + u[249] + u[240] + u[137]
    u[303] = u[302] / u[300]
    u[304] = u[302] / u[136]
    u[305] =  IfElse.ifelse(t  >  2022, (u[302] - u[300])  / u[136],  0) 
    u[306] = u[18] + u[307]
    u[308] = p[117] + p[116] + p[115] + u[307]
    du[18] = ((u[309] + p[115])-u[18]) / p[118]
    du[19] = u[310]
    u[310] = (u[311] - u[19])  / p[119]
    du[20] = (u[21]-u[20]) / p[120]
    u[199] = u[309]
    u[311] = p[117] *  (1  + p[121] * (u[21] / p[123] -  1)  + p[124] * (u[22] / p[122] -  1)) 
    u[307] =  0.02  *  (1  + p[125] * (u[52] /  0.03  -  1)) 
    du[21] = (u[312]-u[21]) / p[126]
    du[22] = (u[313]-u[22]) / p[127]
    u[314] = u[199] + u[20]
    u[309] = u[19] + p[116]
    u[227] = u[18]
    u[315] = (u[316] *  (1  - u[319])  * u[28] + p[128] * u[319])  * u[318] * u[317]
    u[320] =  1  - exp(-u[321]  / p[129]) 
    u[322] =  268  - p[130]
    du[23] = u[323]
    u[324] =  withlookup(t,  [(1980.0,  0.0),  (1990.0,  0.0),  (2000.0,  0.0),  (2020.0,  0.0),  (2100.0,  0.0)]) 
    u[325] =  IfElse.ifelse(t  >  2022,  1  - p[131] *  ramp(t,  (1  -  0)  /  78,  2022,  2100),  1) 
    u[326] =  (1  - p[132])^u[327]
    u[328] = u[25] * (u[329] /  1000)  * u[318] * u[317]
    u[329] =  1.6  * u[330]
    u[132] = u[332] - u[328] - u[331]
    u[318] =  IfElse.ifelse(t  >  2022,  1  + p[133] * (u[139] / p[134] -  1),  1) 
    u[332] =  ( (u[333] + u[334])  * p[135])  /  1000 
    u[335] = u[108] * p[136] /  1000 
    u[336] = p[137] * u[136] + u[337] + u[335]
    u[337] = (u[338] * u[339])  /  1000 
    u[340] = u[341] / u[342]
    u[343] = u[324] * p[138]
    u[344] = (u[345] + u[346] + u[343]) 
    u[334] =  IfElse.ifelse( u[25] >  0, u[24] * u[347],  0)  * u[320] * u[325]
    u[347] =  1  /  200  + p[139] * (u[348] -  1) 
    du[24] = u[334] - u[323] - u[349]
    u[323] = u[24] * u[350]
    u[118] = u[315] * u[24]
    u[341] = u[118] *  (1  + u[351]) 
    u[352] = u[341] / u[180]
    u[353] = u[354] * u[28]
    u[355] = p[128] * u[24] * u[319]
    u[351] =  ramp(t, p[140] / u[138],  2022,  2022  + u[138]) 
    u[342] = u[344]
    u[356] = u[342] - u[355]
    u[316] = u[356] / (u[24] *  (1  - u[319])  ) 
    u[357] = ((u[180] * u[358])  /  1000)  *  (1  - u[359]) 
    u[358] = u[360]
    u[361] = u[337] - u[362]
    u[363] = u[361] / u[136]
    u[331] = u[339] * p[141] /  1000 
    u[338] = p[142] * u[326]
    u[330] =  IfElse.ifelse(t  >  2022,  1  + p[131] *  ramp(t, (p[143] -  1)  /  78,  2022,  2100),  1) 
    u[362] = (u[322] /  1000)  * u[339] * p[136]
    u[364] =  1  + p[144] * (u[365] / p[130] -  1) 
    u[346] = u[366] * p[145]
    u[108] = u[24] *  (1  - u[319])  * u[365] /  1000 
    u[367] = u[368] / p[146]
    u[321] =  max(0, u[25] / p[147]) 
    u[369] =  max(1,  1  + p[148] * (u[321] - p[129])  ) 
    u[359] =  ramp(t, p[149] / u[138],  2022,  2022  + u[138]) 
    u[368] = u[24] * u[108]
    du[25] = u[370] - u[334]
    u[371] = exp(p[150]  *  (t  -  1980)) 
    u[319] =  ramp(t, p[151] / u[138],  2022,  2020  + u[138]) 
    u[372] = exp(p[153]  *  (t  -  1980))  *  IfElse.ifelse(t  >  2022, exp(p[152]  *  (t  -  2022)),  1) 
    u[365] = u[373] / u[371]
    u[374] = (u[108] / u[180])  *  1000 
    u[375] = u[376] +  0  * u[139] -  0  * u[127]
    u[376] =  14  * u[318] * u[317]
    du[26] = u[377]
    u[378] = u[180] * p[154]
    u[379] =  IfElse.ifelse(t  >  2022,  1  - p[131] *  ramp(t,  (1  -  0)  /  78,  2022,  2100),  1) 
    u[350] = p[155] * u[364] * u[379]
    u[380] = u[333] + u[334]
    u[381] = u[323] + u[349]
    u[327] =  log( (u[339] + p[156])  / p[156])  /  0.693 
    u[370] = u[333] *  (1  - p[157]) 
    u[377] = u[333] * p[157]
    du[27] = - u[370] - u[377]
    u[333] = u[27] * u[382] * u[383]
    u[382] = p[158] * u[369]
    u[383] =  IfElse.ifelse(t  >  2022,  1  - p[131] *  ramp(t,  (1  -  0)  /  78,  2022,  2100),  1) 
    u[348] = u[340] /  (1  + p[159]) 
    u[384] = u[26] * u[375] /  1000 
    u[339] = u[24] * u[319]
    u[366] = u[357] - u[385]
    u[385] =  min( u[357], u[384]) 
    u[386] = (u[385] + u[366] *  min(1, u[340] ))  *  1000  / u[180]
    u[354] =  0  + p[160] * (u[365] / p[130] -  1) 
    du[28] = u[353]
    u[387] = u[27] + u[25]
    u[373] =  withlookup( u[316],  [(1.0,  0.0),  (2.0,  40.0),  (2.5,  50.0),  (3.0,  60.0),  (3.5,  70.0),  (4.5,  100.0),  (6.5,  200.0),  (10.0,  600.0)]) 
    u[388] = u[389] * u[180] /  1000 
    u[345] = (u[388] - u[390])  / u[372]
    u[391] = u[345] *  1000  / u[180]
    u[389] =  withlookup( u[233],  [(0.0,  400.0),  (6.1,  680.0),  (8.7,  780.0),  (13.9,  950.0),  (20.0,  1050.0),  (30.0,  1150.0),  (40.0,  1250.0),  (60.0,  1350.0),  (100.0,  1550.0)]) 
    u[390] =  (  ( (u[360] /  1000)  * u[180])  - u[385])  * p[145]
    u[360] =  withlookup( u[233],  [(0.0,  0.0),  (6.1,  6.0),  (8.8,  8.5),  (14.0,  13.0),  (30.0,  27.0),  (40.0,  32.0),  (50.0,  33.0),  (100.0,  25.0)]) 
    u[349] =  max(0, (u[378] - u[29])  / p[161]) 
    du[29] = u[349]
    u[317] =  IfElse.ifelse(t  >  2022,  1  + p[162] * (u[127] / p[163] -  1),  1) 
    u[392] = u[393] * u[30]
    u[394] = u[33] * u[312]
    u[395] = ( (u[31] / p[164])  / (u[30] / p[165])  )  *  IfElse.ifelse(t  >  1984, u[396],  1) 
    du[30] = u[392]
    u[397] =  0  + p[166] *  pulse(t,  2020,  5) 
    u[398] =  1  + p[168] * (u[34] / p[167] -  1) 
    du[31] = (u[223]-u[31]) / p[169]
    u[136] = u[399] * p[164]
    u[400] = u[32] / u[35]
    du[32] = u[399] - u[395]
    u[312] = p[171] * (u[34] / p[170] -  1) 
    u[165] = u[401]
    u[399] = u[402] * u[36] / p[172]
    du[33] = u[394]
    u[396] =  1 
    du[34] = ((u[400] / p[173])-u[34]) / p[174]
    u[393] =  0  + p[175] * (u[34] / p[176] -  1) 
    du[35] = (u[395]-u[35]) / p[177]
    u[401] = u[395] * p[164]
    du[36] = (u[398]-u[36]) / p[178]
    u[403] = u[41] * u[404]
    u[404] = u[39] / p[179]
    u[405] = p[181] / p[180]
    u[406] = u[407] * u[38]
    u[408] = u[409] * u[37]
    u[410] = (u[412] - u[43])  / u[411]
    u[413] = u[44] * u[414]
    u[415] = u[41] * u[414]
    du[37] = u[408]
    u[416] =  max(0,  1  + p[182] * (u[233] / p[66] -  1)) 
    u[417] =  ramp(t, p[183] / u[138],  2022,  2022  + u[138]) 
    u[411] = p[184] /  3 
    u[418] =  1  + p[185] * (u[233] / p[66] -  1) 
    u[419] =  1  + p[186] * (u[44] / p[187] -  1) 
    u[420] = u[421] - u[422]
    u[423] = (u[399] * p[188])  / u[424]
    u[424] = u[43] * u[404]
    u[425] = p[189] * u[405]
    du[38] = (u[420]-u[38]) / p[190]
    u[426] = u[44] * p[191]
    du[39] = ((p[181] * u[418])-u[39]) / p[192]
    u[421] = p[193] *  (1  + p[194] * (u[44] / p[187] -  1))  + u[417]
    u[427] = u[37] * u[42]
    u[412] = (u[428] / u[427])  * p[179]
    u[429] = u[38] *  (1  - u[40]) 
    u[422] = p[196] *  (1  + p[195] * (u[40] / p[196] -  1)) 
    du[40] = (u[313]-u[40]) / u[430]
    u[409] = p[197] * u[416]
    u[414] =  withlookup( u[40] / p[196],  [(0.0,  0.06),  (0.5,  0.02),  (1.0,  0.0),  (1.5,  -0.007),  (2.0,  -0.01)]) 
    u[431] = p[184] /  3 
    u[432] =  max(0, u[406] - u[43]) 
    u[430] = p[184] /  3 
    u[313] = u[432] / u[406]
    u[407] = u[433]
    du[41] = u[415] - u[434]
    u[435] = u[41] / u[423]
    du[42] = (u[419]-u[42]) / u[431]
    du[43] = u[410]
    u[434] = u[41] * u[436]
    u[436] = u[312] *  (1  - p[198]) 
    du[44] = u[413] - u[426]
    u[437] = u[336] + u[302]
    u[438] = u[437]
    u[439] =  1  -  (1  /  (1  + exp(-u[440]  * (u[233] -  14)))) 
    u[441] =  1  + p[199] * (u[207] /  0.5  -  1) 
    u[440] = p[200] * u[441]
    u[442] = u[180] * u[439]
    u[443] =  ( (u[233] - u[45])  / u[45])  / p[201]
    du[45] = (u[233]-u[45]) / p[201]
    u[444] = u[222] + p[202]
    u[445] = u[48] / p[203]
    u[446] = u[49] / p[204]
    u[447] =  max( (u[448] + u[449] * u[136])  / u[450],  0) 
    u[451] =  max( (u[200] + u[452] * u[136])  / u[450],  0) 
    u[453] = u[46] / u[454]
    u[455] = u[47] / u[456]
    u[450] = p[205] * u[457]
    du[46] = u[445] - u[453]
    du[47] = u[446] - u[455]
    u[458] = u[445] / u[46]
    du[48] = u[447] - u[445]
    u[459] = (p[207] / p[208])  * p[203] * p[206]
    du[49] = u[451] - u[446]
    u[460] = (p[209] / u[461])  * p[204] * p[206]
    u[462] = (u[463] - u[50])  * u[458]
    du[50] = u[462]
    u[448] = u[444] * u[51]
    u[456] = u[461]
    u[461] =  15  * u[464]
    u[449] =  IfElse.ifelse(t  >  2022, p[210],  0) 
    u[452] =  IfElse.ifelse(t  >  2022,  0.01  + p[211],  0.01) 
    u[457] =  IfElse.ifelse(t  >  2022,  1  + p[212] * (u[127] / p[163] -  1),  1) 
    u[464] =  IfElse.ifelse(t  >  2022,  1  + p[213] * (u[127] / p[163] -  1),  1) 
    u[428] = u[46] + u[47]
    u[465] =  1  + p[214] * (u[306] / u[308] -  1) 
    u[466] = u[223] / u[467]
    u[468] =  1  + p[215] * (u[54] / p[216] -  1) 
    u[469] =  1  + p[217] * (u[54] / p[216] -  1) 
    du[51] = ((p[218] * u[470] * (u[471] + u[465] + u[468]) /  3) -u[51]) / p[219]
    u[470] =  max( p[220],  1  + p[221] * (u[233] / p[66] -  1)) 
    u[472] =  withlookup( u[233] / p[66],  [(0.0,  1.0),  (1.0,  1.0),  (2.0,  0.85),  (2.1,  0.84),  (4.0,  0.65),  (8.0,  0.55),  (16.0,  0.5)]) 
    u[473] = (u[448] + u[200])  / u[136]
    u[454] = (p[208] * u[464])  / u[469]
    du[52] = (((u[402] - u[53]) / u[53])-u[52]) / 1
    du[53] = (u[402]-u[53]) / 1
    u[467] = u[402] * p[188]
    u[402] = p[222] *  ( (u[46] + u[47])  / (p[207] + p[209])  )^p[225] * (u[424] / p[224])^p[223] * (u[50]) 
    du[54] = (u[466]-u[54]) / p[226]
    u[471] =  1  + p[227] * (u[435] / p[187] -  1) 
    du[55] = u[475] - u[474]
    du[56] = u[474] - u[476]
    u[433] = u[56] + u[57] + u[58] - u[477]
    du[57] = u[476] - u[478]
    du[58] = u[478] - u[479]
    u[480] = u[475] / u[180]
    u[475] = u[56] * p[229] * (u[481] / p[228]) 
    u[482] = p[230] * u[483]
    u[484] = u[479] / u[180]
    u[479] = u[495]
    u[496] =  ( (p[235] + (p[232] - p[235])  * exp(-p[234]  * (u[69] - p[233])  )  )  *  (1  + p[231] * (u[69] - p[233])  )  )  *  (1  - u[483])  * u[497]
    u[498] = (u[55] + u[58])  / (u[56] + u[57]) 
    u[483] =  ramp(t, p[236] / u[138],  2022,  2022  + u[138]) 
    u[499] =  ramp(t, (p[237] - p[238])  / u[138],  2022,  2022  + u[138]) ###
    du[69] = (u[233] - u[69])  / p[239]
    u[497] =  IfElse.ifelse( p[240] >  0,  IfElse.ifelse(t  >  2022,  1  +  ramp(t, (p[241] -  1)  /  78,  2022,  2100),  1),  1) 
    u[233] = u[136] / u[180]
    u[500] = ((p[242] - (p[242] - p[245])  * exp(-p[244] * (u[69] - p[233])  ))  *  (1  + p[243] * (u[69] - p[233])  ) ) * u[502] * u[501]
    u[486] = u[500] -  60 
    u[501] =  IfElse.ifelse( p[240] >  0,  IfElse.ifelse(t  >  2022,  1  +  ramp(t, (p[246] -  1)  /  78,  2022,  2100),  1),  1) 
    u[481] = u[496] * p[247]
    u[477] = u[58] * (u[500] - u[503])  / (u[500] -  60) 
    u[503] =  IfElse.ifelse( u[500] < p[245], p[248], p[248] + p[249] * (u[500] + u[499] - p[245])  ) 
    u[474] = u[513]
    u[476] = u[523]
    u[478] = u[533]
    u[534] = u[480] - u[484]
    u[180] = u[55] + u[56] + u[57] + u[58]
    u[535] = u[477] / u[433]
    u[502] =  IfElse.ifelse(t  >  2022,  max(0,  1  + p[250] * (u[127] / p[163] -  1)),  1) 
    u[536] = u[537] * u[100]
    u[538] = (p[253] +  IfElse.ifelse(t  >  2022, p[254],  0)  *  (1  + p[251] * ( (u[539] / p[252])  -  1 ))) ###
    u[188] =  max(0, u[438] - p[255]) 
    u[540] = u[188] / u[136]
    u[541] = u[206] / u[136]
    u[542] = u[47] / u[201]
    u[543] =  IfElse.ifelse(t  >  2022,  max(0, p[257] *  (1  -  1  * (u[233] / p[256] -  1))),  0) 
    u[463] = u[100] * u[544]
    u[544] =  IfElse.ifelse(t  >  2022,  1  + p[258] * (u[127] / p[163] -  1),  1) 
    u[545] = u[540] * p[259]
    u[546] =  max(0,  1  + p[260] *  log( u[542] / p[261])  ) 
    u[547] = u[548] / u[180]
    u[549] = u[206] / u[180]
    du[100] = u[536]
    u[550] =  min(1,  1  + p[262] * (u[210] /  1  -  1)) 
    u[537] = (u[538] +  0)  * u[550] + u[543]
    du[101] = (u[545]-u[101]) / (p[219] + p[203])
    u[539] = u[548] / u[136]
    u[551] = u[100] *  (1  - u[101]) 
    u[548] = u[201] * u[546]
    u[552] = p[263] +  ramp(t, (p[264] - p[263])  /  78,  2022,  2022  +  78) 
    u[553] = exp(p[265]  +  log( u[225] / p[266])  ) 
    u[554] =  1  + p[268] * (u[207] / p[267] -  1) 
    u[555] =  max( p[270],  min(1,  1  + p[271] * (u[6] / p[269] -  1))) 
    u[556] =  (0.5  * u[553] +  0.5  * u[558])  * u[554] * u[555] * u[557]
    u[557] =  (1  + p[273] * (u[102] - p[272] ))  * u[559]
    u[558] = exp(p[274]  +  log( u[549] / p[275])  ) 
    u[560] =  WorldDynamics.interpolate( u[207] / p[276],  tables[:IEST],  ranges[:IEST]) 
    u[138] =  IfElse.ifelse( p[278] >  0, p[277], u[104]) 
    u[561] = p[279] * u[562] * u[563]
    u[564] = u[565] * u[560]
    du[102] = ( ( ( (u[556] - u[103]) / u[556] )  / p[280])-u[102]) / p[280]
    du[103] = (u[556]-u[103]) / p[280]
    u[566] = u[549] / u[233]
    u[565] =  WorldDynamics.interpolate( u[566] / p[281],  tables[:PSESTR],  ranges[:PSESTR]) 
    du[104] = (u[561]-u[104]) / p[282]
    u[567] =  1  + p[283] * (u[102] - p[284]) 
    u[563] =  1  + p[285] * (u[567] / p[286] -  1) 
    u[562] =  1  + p[287] * (u[105] / p[288] -  1) 
    du[105] = (u[564]-u[105]) / p[289]
    u[559] =  1  + p[290] * (u[38] / p[291] -  1) 
     
    u[504] = u[70] / (20 / 10)
    du[70] = u[475] - u[504]
    u[505] = u[71] / (20 / 10)
    du[71] = u[504] - u[505]
    u[506] = u[72] / (20 / 10)
    du[72] = u[505] - u[506]
    u[507] = u[73] /(20 / 10)
    du[73] = u[506] - u[507]
    u[508] = u[74] / (20 / 10)
    du[74] = u[507] - u[508]
    u[509] = u[75] / (20 / 10)
    du[75] = u[508] - u[509]
    u[510] = u[76] / (20 / 10)
    du[76] = u[509] - u[510]
    u[511] = u[77] / (20 / 10)
    du[77] = u[510] - u[511]
    u[512] = u[78] / (20 / 10)
    du[78] = u[511] - u[512]
    u[513] = u[79] / (20 / 10)
    du[79] = u[512] - u[513]

    u[485] = u[59] / (u[486] / 10)
    du[59] = u[478] - u[485]
    u[487] = u[60] /(u[486] / 10)
    du[60] = u[485] - u[487]
    u[488] = u[61] / (u[486] / 10)
    du[61] = u[487] - u[488]
    u[489] = u[62] /(u[486] / 10)
    du[62] = u[488] - u[489]
    u[490] = u[63] / (u[486] / 10)
    du[63] = u[489] - u[490]
    u[491] = u[64] / (u[486] / 10)
    du[64] = u[490] - u[491]
    u[492] = u[65] / (u[486] / 10)
    du[65] = u[491] - u[492]
    u[493] = u[66] / (u[486] / 10)
    du[66] = u[492] - u[493]
    u[494] = u[67] / (u[486] / 10)
    du[67] = u[493] - u[494]
    u[495] = u[68] / (u[486] / 10)
    du[68] = u[494] - u[495]

    u[514] = u[80] / (20 / 10)
    du[80] = u[474] - u[514]
    u[515] = u[81] /(20 / 10)
    du[81] = u[514] - u[515]
    u[516] = u[82] / (20 / 10)
    du[82] = u[515] - u[516]
    u[517] = u[83] / (20 / 10)
    du[83] = u[516] - u[517]
    u[518] = u[84] / (20 / 10)
    du[84] = u[517] - u[518]
    u[519] = u[85] / (20 / 10)
    du[85] = u[518] - u[519]
    u[520] = u[86] / (20 / 10)
    du[86] = u[519] - u[520]
    u[521] = u[87] / (20 / 10)
    du[87] = u[520] - u[521]
    u[522] = u[88] / (20 / 10)
    du[88] = u[521] - u[522]
    u[523] = u[89] / (20 / 10)
    du[89] = u[522] - u[523]
    
    u[524] = u[90] /(20 / 10)
    du[90] = u[476] - u[524]#
    u[525] = u[91] / (20 / 10)
    du[91] = u[524] - u[525]
    u[526] = u[92] / (20 / 10)
    du[92] = u[525] - u[526]
    u[527] = u[93] / (20 / 10)
    du[93] = u[526] - u[527]
    u[528] = u[94] / (20 / 10)
    du[94] = u[527] - u[528]
    u[529] = u[95] / (20 / 10)
    du[95] = u[528] - u[529]
    u[530] = u[96] / (20 / 10)
    du[96] = u[529] - u[530]
    u[531] = u[97] / (20 / 10)
    du[97] = u[530] - u[531]
    u[532] = u[98] / (20 / 10)
    du[98] = u[531] - u[532]
    u[533] = u[99] / (20 / 10)
    du[99] = u[532] - u[533]
    
    end

function ode_problem()
    
    u0 = [1.052;2.5;2600.0;12.0;0.0;0.4;0.0;0.3;17975.68;5400.0;
    7081.0;13000.0;7406.88;1.0;300.0;10.0;980.0;0.04;0.02;0.02;
    0.02;0.0326951;3000.0;1450.0;1100.0;3300.0;2600.0;1.0;215.0;1.0;
    28087.0;11234.8;1.0;1.0;28087.0;1.0;41.0;0.8;2.0;0.05;
    3.6715;1.0;1530.0;0.5;5.952000000000001;59250.0;5350.0;10072.5;909.5;1.0;
    1.05149;0.06;26497.1;1.0;2170.0;1100.0;768.0;382.0;21.0;21.0;
    21.0;21.0;21.0;21.0;21.0;21.0;21.0;21.0;6.4;200.0;
    200.0;200.0;200.0;200.0;200.0;200.0;200.0;200.0;200.0;128.0;
    128.0;128.0;128.0;128.0;128.0;128.0;128.0;128.0;128.0;76.0;
    76.0;76.0;76.0;76.0;76.0;76.0;76.0;76.0;76.0;1.0;
    0.0;0.0;0.65;30.0;0.6;0.11;0.006707512307692306;60.9773846153846;0.009;0.015707512307692306;
    0.2104;0.011073684210526315;0.2104;0.43;0.090472;0.05;0.15244346153846156;3048.8692307692304;0.19;0.34244346153846156;
    0.5;0.3333333333333333;0.5;0.82;0.41;1.0;0.4;60.0;0.9166666666666666;6.666666666666667;
    20.003678560251025;-0.4821896168156954;0.0;20.48586817706672;0.7122041713337496;28087.0;0.0;30.0;329.1139240506329;0.0032;
    1.0531645569620252;0.18;1.733636556962025;27.989830761789484;0.3094117647058824;0.3094117647058824;0.010013468013468012;0.0;0.0015;0.000375;
    6.52471875;0.018000000000000002;1200.0;2.0;0.9;2.633636556962025;42.309371287594935;2.2666666666666666;0.010013937282229964;0.0;
    -468.90439999999995;2.9571999999999434;-471.8615999999999;-0.016694712856481643;28087.0;0.4;0.0;12035.857;21.24299999999999;351.0;
    708.0999999999998;11700.0;1011.132;449.39200000000005;89.8784;296.2752;663.662;370.344;2.7230445701357464;4420.0;
    0.4285205611136825;0.8939636486630825;0.19225976430377043;0.27318332324562966;0.0;0.0;0.0;0.0;0.3;7002.9447;
    6531.0831;0.64;0.019200000000000005;8798.343;5617.400000000001;0.0;2808.7000000000003;0.3132532132303201;0.025;1350.0;
    4050.0;28087.0;2639.5029;372.24299999999903;0.23253046249154413;5400.0;0.6073169989679265;8426.099999999999;13874.302899999999;0.9956016376523384;
    5617.400000000001;2808.7000000000003;14043.5;14043.5;0.09999999999999998;0.9;8426.099999999999;14043.5;6372.900000000001;0.4;
    13871.345699999998;7672.900000000001;28928.147399999998;1300.0;8.49673202614379;0.0002131422401049024;0.04;0.2;0.5338560108846983;19.8;
    600.0;0.23515212362662125;6.354524886877828;1.039372386429666;0.0;19.446495790637055;6945.177068084663;2.8;4.634811804766226;0.0;
    0.0;0.0;2.5418099547511313;1.0201794871794871;11234.8;4509.193333333334;0.0;0.0;0.0;0.0;
    4509.193333333334;2435.9837347513294;11234.8;0.065;730.262;243.42066666666665;-56.57933333333335;0.0;7.5;0.0;
    0.6931471805599453;0.8566967073300467;5.996876951310327;0.0;0.9;900.0;0.9;70.56599915788513;100.8085702255502;194.696;
    9734.8;265.26199915788516;285.9619991578851;0.0;0.0;0.0;95.91;9.383797309978105;3.99625;289.38237783686094;
    1500.0;9734.8;1216.85;100.8085702255502;21.858570225550217;44.83367346938776;1.120841836734694;9.933469387755101;75.0;11234.8;
    1.0;0.9198917648734289;7320.528960483787;1.6562282716026668;0.4550094;1460.97864;1082.2064;224.696;224.696;1686.1296494;
    0.060032386848007976;1592.864399157885;0.9446867859329185;0.05671180258332627;0.0;0.06;0.02;0.06;0.025;0.010382940000000004;
    0.030382940000000004;0.017009345794392526;0.03269508670520235;0.045;2.1026684350132623;2.1026684350132623;1.0;1.0;0.0;0.9932620530009145;
    1.0;248.0;5.927909538461539;0.0;1.0;1.0;0.0;1.76;1.6;1.0;
    0.0;1.2778103831843044;10.4;9.258621279758525;30.4886923076923;1434.8386923076923;0.0;400.0;0.0;1.0;
    3048.8692307692304;3048.8692307692304;0.0;3048.8692307692304;3048.8692307692304;0.0;0.00642857142857143;0.9523809523809523;0.6;0.004088213474801062;
    0.0;0.6897894187260702;-0.0011026684350132624;-0.0011026684350132624;0.0;3048.8692307692304;27.561666666666667;6.2356711915535445;0.0;6.2356711915535445;
    0.0;0.0;0.0;1.0220533687002653;42.053368700265246;0.0;0.9996292559899115;88417.20769230767;1.0;9.360000000000001;
    1.0;1.0;42.053368700265246;13.795788374521404;14.0;14.0;1.04;221.0;1.0;19.658621279758528;
    6.527909538461539;0.004;1.0;46.2;27.561666666666667;6.2356711915535445;3700.0;3048.8692307692304;689.7894187260703;0.0;
    689.7894187260703;-0.0;-0.0;0.017009345794392526;28087.0;1.0;0.0;1.0;28087.0;0.39999999999999997;
    28087.0;28087.0;7.343;2.0;2.0;1581.7142857142858;1977.142857142857;0.8205826498868777;0.020014210972850676;59.49098621420984;
    0.7666666666666666;1575.6097560975609;0.0;0.0;0.0;1.0007105486425338;0.0;1.00021316459276;1.0;0.7999999999999999;
    0.85;0.05;9.17875816993464;3060.0;3060.0;0.0075;41.0;64600.0;0.76;0.7666666666666666;
    0.7666666666666666;51.71428571428578;1977.142857142857;-0.0;0.39999964396339943;-0.0;3027.703091465577;3027.703091465577;0.8856943285097607;0.26780490030962206;
    0.8926830010320735;3914.768932013142;0.016907127305016246;7672.900000000001;6715.0;606.3333333333334;8067.977621000001;8067.977621000001;0.0;1.0;
    1630.87;0.01;3950.0;15.0;356.6666666666667;15.0;1.0;0.11333333333333333;10072.5;909.5;
    15.0;0.0;1.0;1.0;1.0;1.0299479260868016;28087.0;1.0;1.0;1.001421097285068;
    1.5000017801830028;1.0;0.3353144736354898;100.0;94.6;64.0;272.85714285714283;38.0;30.0;0.021402714932126695;
    3.44;0.0;0.0;0.006787330316742082;30.0;7.0;30.0;30.0;30.0;30.0;
    30.0;30.0;30.0;30.0;30.0;4.3;1.0;1.366167023554604;0.0;67.0;
    1.0;1.0;62.0;100.0;100.0;100.0;100.0;100.0;100.0;100.0;
    100.0;100.0;100.0;64.0;64.0;64.0;64.0;64.0;64.0;64.0;
    64.0;64.0;64.0;38.0;38.0;38.0;38.0;38.0;38.0;38.0;
    38.0;38.0;38.0;0.014615384615384613;0.1380057803468208;0.01;0.01;0.01;0.15804590729276272;0.0;
    0.19225976430377043;1.3209876543209877;0.0;1.0;0.0;1.0960581229955129;1.0043066511610468;4439.035398131827;1.2217194570135748;1.0;
    1.0;0.0;0.933916188196151;0.8712196012384883;1.0;0.6723710886909668;0.88;0.8200802881101489;1.0;0.9878050017201225;
    30.0;1.0;1.0;0.6330505226959878;0.6408658810125683;0.19225976430377045;1.3;]

        p = [0.01,0.11,0.0,5.0,1.052,95.0,5.0,0.05,0.0,0.01,
    2.5,7.5,5.0,1.35,1.0,60.0,2.75,2200.0,95.0,0.0,
    7.9,7.0,23.0,1.0,0.7,0.3,510.0,12.0,0.01,0.0015,
    0.4,4.0,333.0,55.0,0.95,2.0,0.18,0.9,3.0,0.0006,
    0.0,0.01,5.0,0.4,0.3,0.3,0.0,0.0,0.0,0.0,
    5.0,0.5,0.0,0.3,10.0,0.0,200.0,0.75,0.0,0.61,
    0.2,1.0,1.0,0.9,-0.06,6.4,0.5,1.0,1.0,1.0,
    0.03,0.9,10.0,20.0,0.033,0.5,0.2,0.0,-0.003,0.002,
    0.01,0.5,0.03,0.0,10.0,3.0,0.065,0.5,0.23,3.0,
    3.0,40.0,10.0,0.2,7.0,0.001,0.7,0.02,0.0,40.0,
    10.0,0.0,0.345,278.0,24.0,8.0,3.0,40.0,0.5,8.0,
    0.03,1.35,240.0,0.02,0.015,0.005,0.02,1.0,1.0,10.0,
    0.7,0.05,0.02,-1.5,0.0,1.0,1.0,5.0,0.2,20.0,
    1.0,0.05,0.3,420.0,65.0,500.0,0.05,0.0,-0.03,0.05,
    1.0,400.0,2.0,0.02,24.0,88450.0,1100.0,-5.0,0.1,0.01,
    0.1,0.0,0.002,0.05,0.004,5.0,0.1,0.004,0.05,-0.001,
    10.0,-0.3,1.35,1.0,1.0,0.0,1.0,-0.6,1.2,1.07,
    -0.26,1.0,0.4,0.25,-0.6,1.0,1.0,0.24,1.0,1.0,
    2.0,-0.1,0.0,2.3,-0.03,1.05,0.5,1.0,1530.0,5.0,
    0.015,5.0,0.85,0.2,0.05,0.05,0.02,1.0,-0.5,0.3,
    4.0,0.0,1.5,1.5,1.0,1.7,59250.0,15.0,5350.0,0.0,
    0.0,0.2,-0.1,-0.8,5.0,1.0,0.5,0.9,1.0,0.65,
    -0.2,28087.0,0.7,3060.0,0.3,1.0,-2.5,20.0,0.5,0.01,
    0.0,4.3,6.4,0.14,1.2,0.0,0.0,0.0,10.0,1.0,
    1.6,85.0,0.001,0.15,67.0,1.1,0.8,62.0,0.75,-0.02,
    0.5,0.3,0.01,0.003,9145.0,15.0,0.0,-0.1,0.3,1.0,
    1.2,-0.1,0.0,0.0,0.5,15.0,0.5,-0.6,1.0,0.2,
    -0.58,0.02,6.0,0.7,3.0,0.6,30.0,0.0,30.0,9.0,
    0.3,10.0,-15.0,0.02,1.0,1.3,-1.0,0.6,10.0,0.5,
    0.8,]
    
    #tspan = (1980.0, 2100.0)
    tspan = collect(range(1980.0, stop=2100.0, length=7681))
    prob = ODEProblem(e4a, u0, tspan, p)
    return prob
end





#sol = OrdinaryDiffEq.solve(prob, Euler(), dt=0.015625, dtmax=0.015625)




"""
function modify(p)
    prob = ode_problem()
    t = collect(range(1980, stop=2100, length=7681))
    prob1 = remake(prob; p=p)
    sol = solve(prob1, Tsit5(); saveat=t)
    [mean(sol[7, :])]
end
"""

# ub_lb = [[1,2], [1,1], [0.4,0.4], [1,1], [0.25,0.25], [1.07,1.07], [28087,28087], [1,1], [1,1], [-0.6,-0.6], [-0.26,-0.26], [-0.6,-0.6], [1,1], [1,1], [0.24,0.24]];
# m = gsa(modify,Morris(total_num_trajectory=1000,num_trajectory=150),ub_lb);
